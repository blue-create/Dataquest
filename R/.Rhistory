library(readr)
library(dplyr)
## Import data
dat <- read_csv("book_reviews.csv")
## Size of dataset
dim(dat)
## column names
colnames(dat)
## Types of columns using a for loop
coltype <- c()
for (t in colnames(dat)) {
t <- typeof(dat[[t]])
coltype <- c(coltype, t)
}
coltype
## Types of columns using a vector
lapply(head(dat), class)
coltype <- c(coltype, colnames(dat[[t]]) t)
for (t in colnames(dat)) {
t <- typeof(dat[[t]])
coltype <- c(coltype, colnames(dat[[t]]) t)
for (t in colnames(dat)) {
t <- typeof(dat[[t]])
coltype <- c(coltype, colnames(dat[[t]]), t)
}
coltype
coltype <- c(coltype, colnames(dat), t)
for (t in colnames(dat)) {
t <- typeof(dat[[t]])
coltype <- c(coltype, colnames(dat), t)
}
coltype
coltype <- c()
for (t in colnames(dat)) {
t <- typeof(dat[[t]])
coltype <- c(coltype, colnames(dat), t)
}
coltype
for (t in colnames(dat)) {
t <- typeof(dat[[t]])
coltype <- c(coltype, t)
}
coltype
## Import data
dat <- read_csv("book_reviews.csv")
## Size of dataset
dim(dat)
## column names
colnames(dat)
## Types of columns using a for loop
coltype <- c()
for (t in colnames(dat)) {
t <- typeof(dat[[t]])
coltype <- c(coltype, t)
}
coltype
## Types of columns using a vector
lapply(head(dat), class)
## Unique values in each column
lapply(dat, unique)
uniq <- c(uniq, t)
## Loop: Unique values in each column
uniq <- c()
for (t in dat) {
t <- unique(dat[t])
uniq <- c(uniq, t)
}
## Loop: Unique values in each column
for (t in colnames(dat)) {
print(unique(dat[t]))
}
## Loop: Types of columns
coltype <- c()
for (t in colnames(dat)) {
t <- typeof(dat[t])
coltype <- c(coltype, t)
}
coltype
t <- typeof(dat[[t]})
## Loop: Types of columns
coltype <- c()
for (t in colnames(dat)) {
t <- typeof(dat[[t]])
coltype <- c(coltype, t)
}
coltype
print(coltype, t)
coltype <- c()
for (t in colnames(dat)) {
t <- typeof(dat[[t]])
print(coltype, t)
}
coltype <- c()
for (t in colnames(dat)) {
t <- typeof(dat[[t]])
coltype <- c(coltype, t)
}
coltype
for (t in colnames(dat)) {
print(unique(dat[t]))
}
library(readr)
library(dplyr)
## Import data
dat <- read_csv("book_reviews.csv")
## Size of dataset
dim(dat)
## column names
colnames(dat)
## Loop: Types of columns
coltype <- c()
for (t in colnames(dat)) {
t <- typeof(dat[[t]])
coltype <- c(coltype, t)
}
coltype
## Loop: Unique values in each column
for (t in colnames(dat)) {
print(unique(dat[t]))
}
## Vector: Types of columns
lapply(head(dat), class)
## Vector: Unique values in each column
lapply(dat, unique)
## Loop: check which columns have data missing
for (t in colnames(dat)) {
is.na(dat[[t]])
}
## Loop: check which columns have data missing
for (t in colnames(dat)) {
print(is.na(dat[[t]]))
}
## Loop: check which columns have data missing
for (t in colnames(dat)) {
x <- is.na(dat[[t]])
}
x
?is.na
x <- anyNA(dat[[t]])
## Loop: check which columns have data missing
for (t in colnames(dat)) {
x <- anyNA(dat[[t]])
}
y
x
## Loop: check which columns have data missing
for (t in colnames(dat)) {
anyNA(dat[[t]])
}
is.na(dat[[t]])
## Loop: check which columns have data missing
na <- c()
for (t in colnames(dat)) {
na[t] <- sum(is.na(dat[[t]]))
}
na
## Vector:
dat %>% is.na()
## Vector:
dat %>% filter_at(vars(...), all_vars(is.na(.)))
?vars
## Vector:
dat %>% is.na(.)
## Vector:
dat %>% select_if(function(x) any(is.na(x))) %>%
summarise_each(funs(sum(is.na(.))))
```{r data cleaning/processing, warning = FALSE}
## Loop: check which columns have data missing
na <- c()
for (t in colnames(dat)) {
na[t] <- sum(is.na(dat[[t]]))
}
na
## Vector:
dat %>% select_if(function(x) any(is.na(x))) %>%
summarise_each(funs(sum(is.na(.))))
dat %>% select_if(function(x) any(is.na(x)))
dat %>% select_if(function(x) any(is.na(x))) %>%
summarise_each(funs(sum(is.na(.))))
## Remove NA's
clean_dat <- dat %>% filter(!(is.na(reviews)))
## Remove NA's
clean_dat <- dat %>% filter(!is.na(reviews))
## Remove NA's
clean_dat <- dat %>% filter(!is.na(dat))
View(clean_dat)
dim(clean_dat)
## Remove NA's
clean_dat <- dat %>% filter(!is.na(dat))
dim(clean_dat)
## Remove NA's
clean_dat <- dat %>% filter(!is.na(dat$review))
dim(clean_dat)
## Unique values in column state
unique(clean_dat$state)
clean_dat <- clean_dat %>% mutate(
"CA" == "California")
## Correct inconsistency in state column
unique(clean_dat$state)
clean_dat <- clean_dat %>% mutate(
"CA" == "California")
## Correct inconsistency in state column
unique(clean_dat$state)
clean_dat <- clean_dat %>% mutate(
state = case_when(
state == "California" ~ "CA",
state == "New York" ~ "NY",
state == "Texas" ~ "TX",
state == "Floria" ~ "FL"
)
)
## Correct inconsistency in state column
unique(clean_dat$state)
clean_dat <- clean_dat %>% mutate(
state = case_when(
state == "California" ~ "CA",
state == "New York" ~ "NY",
state == "Texas" ~ "TX",
state == "Florida" ~ "FL"
)
)
## Correct inconsistency in state column
unique(clean_dat$state)
clean_dat <- clean_dat %>% mutate(
state = case_when(
state == "California" ~ "CA",
state == "New York" ~ "NY",
state == "Texas" ~ "TX",
state == "Florida" ~ "FL"
)
)
## Correct inconsistency in state column
unique(clean_dat$state)
class(clean_dat)
class(clean_dat$state)
## Vector: check which columns have data missing
dat %>% select_if(function(x) any(is.na(x))) %>%
summarise_each(funs(sum(is.na(.))))
## Remove NA's
clean_dat <- dat %>% filter(!is.na(dat$review))
dim(clean_dat)
## Correct inconsistency in state column
unique(clean_dat$state)
clean_dat2 <- clean_dat %>% mutate(
state = case_when(
state == "California" ~ "CA",
state == "New York" ~ "NY",
state == "Texas" ~ "TX",
state == "Florida" ~ "FL"
)
)
unique(clean_dat2$state)
## Converting textbook ratings to numeric scores
clean_dat3 <- clean_dat2 %>% mutate(
review_num = case_when(
review == "Poor" ~ 1,
review == "Fair" ~ 2,
review == "Good" ~ 3,
review == "Great" ~ 4,
review == "Excellent" ~ 5,
is_high_review = case_when(
review_num > 4 ~ TRUE,
review_num < 4 ~ FALSE
))
)
## Converting textbook ratings to numeric scores
clean_dat3 <- clean_dat2 %>% mutate(
review_num = case_when(
review == "Poor" ~ 1,
review == "Fair" ~ 2,
review == "Good" ~ 3,
review == "Great" ~ 4,
review == "Excellent" ~ 5),
is_high_review = case_when(
review_num > 4 ~ TRUE,
review_num < 4 ~ FALSE
)
)
dim(clean_dat3)
unique(clean_dat2$state)
dim(clean_dat)
View(clean_dat3)
## Vector: check which columns have data missing
dat %>% select_if(function(x) any(is.na(x))) %>%
summarise_each(funs(sum(is.na(.))))
## Remove NA's
clean_dat <- dat %>% filter(!is.na(dat$review))
dim(clean_dat)
## Loop: check which columns have data missing
na <- c()
for (t in colnames(dat)) {
na[t] <- sum(is.na(dat[[t]]))
}
na
## Vector: check which columns have data missing
dat %>% select_if(function(x) any(is.na(x))) %>%
summarise_each(funs(sum(is.na(.))))
## Remove NA's
clean_dat <- dat %>% filter(!is.na(dat$review))
dim(clean_dat)
## Correct inconsistency in state column
unique(clean_dat$state)
clean_dat2 <- clean_dat %>% mutate(
state = case_when(
state == "California" ~ "CA",
state == "New York" ~ "NY",
state == "Texas" ~ "TX",
state == "Florida" ~ "FL"
)
)
unique(clean_dat2$state)
## Converting textbook ratings to numeric scores
clean_dat3 <- clean_dat2 %>% mutate(
review_num = case_when(
review == "Poor" ~ 1,
review == "Fair" ~ 2,
review == "Good" ~ 3,
review == "Great" ~ 4,
review == "Excellent" ~ 5),
is_high_review = case_when(
review_num > 4 ~ TRUE,
review_num < 4 ~ FALSE
)
)
dim(clean_dat3)
View(clean_dat)
View(clean_dat2)
clean_dat2 <- clean_dat %>% mutate(
state = case_when(
state == "California" ~ "CA",
state == "New York" ~ "NY",
state == "Texas" ~ "TX",
state == "Florida" ~ "FL",
TRUE ~ state
)
)
unique(clean_dat2$state)
## Converting textbook ratings to numeric scores
clean_dat3 <- clean_dat2 %>% mutate(
review_num = case_when(
review == "Poor" ~ 1,
review == "Fair" ~ 2,
review == "Good" ~ 3,
review == "Great" ~ 4,
review == "Excellent" ~ 5),
is_high_review = case_when(
review_num > 4 ~ TRUE,
review_num < 4 ~ FALSE
)
)
dim(clean_dat3)
## Converting textbook ratings to numeric scores
clean_dat3 <- clean_dat2 %>% mutate(
review_num = case_when(
review == "Poor" ~ 1,
review == "Fair" ~ 2,
review == "Good" ~ 3,
review == "Great" ~ 4,
review == "Excellent" ~ 5),
is_high_review = case_when(
review_num > 4 ~ TRUE,
review_num <= 4 ~ FALSE
)
)
dim(clean_dat3)
## Converting textbook ratings to numeric scores
clean_dat3 <- clean_dat2 %>% mutate(
review_num = case_when(
review == "Poor" ~ 1,
review == "Fair" ~ 2,
review == "Good" ~ 3,
review == "Great" ~ 4,
review == "Excellent" ~ 5),
is_high_review = case_when(
review_num >= 4 ~ TRUE,
review_num < 4 ~ FALSE
)
)
dim(clean_dat3)
View(dat)
bookdata <- clean_dat3 %>%
group_by(price) %>%
count(book)
View(bookdata)
bookdata <- clean_dat3 %>%
group_by(price) %>%
count(book) %>%
mutate(profit = price * n)
bookdata <- clean_dat3 %>%
group_by(price, review_num) %>%
count(book) %>%
summarise(review_num) %>%
mutate(profit = price * n)
bookdata <- clean_dat3 %>%
group_by(price, review_num) %>%
count(book)
bookdata <- clean_dat3 %>%
group_by(price) %>%
count(book) %>%
summarise(review_num) %>%
mutate(profit = price * n)
bookdata <- clean_dat3 %>%
summarise(review_num) %>%
group_by(price) %>%
count(book) %>%
mutate(profit = price * n)
bookdata <- clean_dat3 %>%
group_by(price) %>%
count(book) %>%
mutate(profit = price * n)
bookratings <- clean_dat2 %>%
group_by(book) %>%
summarize(mean(review_num))
bookratings <- clean_dat2 %>%
group_by(book) %>%
summarisee(mean(review_num))
bookratings <- clean_dat2 %>%
group_by(book) %>%
summarise(mean(review_num))
class(clean_dat3$review_num)
bookratings <- clean_dat3 %>%
group_by(book) %>%
summarise(mean(review_num))
View(bookratings)
bookratings <- clean_dat3 %>%
group_by(book) %>%
summarise(review_mean = mean(review_num))
bookdat <- merge(bookdata, bookratings, by = "book")
View(bookdat)
View(bookdat)
View(dat)
bookdat[reorder(profit)]
bookdat[reorder(bookdat$profit)]
bookdat[order(bookdat$profit, decreasing = TRUE)]
bookdat[order(bookdat$profit, decreasing = TRUE),]
bookdat2<- clean_dat3 %>%
group_by(state) %>%
count(book) %>%
mutate(profit = price * n)
bookdat2<- clean_dat3 %>%
group_by(state) %>%
count(book)
View(bookdat2)
bookdat2<- clean_dat3 %>%
group_by(state) %>%
summarize(profit = price * count(book))
bookdat <- merge(bookdata, bookratings, by = "book") %>%
arrange(desc(profit))
View(bookdat)
---
title: 'Guided Project: Creating An Efficient Data Analysis Workflow'
author: "Ba Linh Le"
date: "6 12 2020"
output:
html_document:
df_print: paged
prettydoc::html_pretty:
theme: tango
---
# Description
