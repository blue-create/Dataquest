"In my opinion, a man should always have the final say about decisions in his relationship or marriage.",
"In my opinion, a guy who spends a lot of time on his looks is not very manly.",
"In my opinion, if a guy has a girlfriend or a wife, he deserves to know where she is all the time.")
# Generate simulated data for end survey
dat_post <- data.frame(replicate(15,sample(1:5, 313, rep = TRUE)))
# Distinguish between survey results via column prefixes
names(dat_post) <- paste0("postD. ", names(dat_pre))
names(dat_pre) <- paste0("preD.", names(dat_pre))
# Create df including both survey results and randomized group allocation
dat1 <- cbind(dat_pre, dat_post) %>%
mutate(treatment = sample(rep(c(1, 0), length=n())))
dt <- cbind(dat, dat1)
# Change column names for convenience
names(dt)[33:47] <- paste0("pre", 1:15)
names(dt)[48:62] <- paste0("post", 1:15)
write.xlsx(dt, 'simulated_data.xlsx')
View(dt)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(likert)
library(tidyverse)
library(psych)
library(RColorBrewer)
library(kableExtra)
library(ggplot2)
library(ggcorrplot)
library(data.table)
theme_set(theme_minimal())
dat <- read_excel("simulated_data.xlsx")
dat <- read_excel("data\simulated_data.xlsx")
dat <- read_excel("data/simulated_data.xlsx")
dat <- read_excel("ManBoxScale/data/simulated_data.xlsx")
getwd()
install.packages("installr")
library(installr)
updateR()
dat <- read.csv("sales2019")
dat <- read.csv("sales2019")
getwd()
setwd(~Documents/0GitHub/Dataquest/R)
setwd(~Documents/GitHub/Dataquest/R)
setwd("~Documents/GitHub/Dataquest/R")
setwd("~/GitHub/Dataquest/R")
dat <- read.csv("sales2019")
dat <- read.csv("R/sales2019")
library(readr)
sales2019 <- read_csv("sales2019.csv")
View(sales2019)
library(readr)
sales2019 <- read_csv("sales2019.csv")
```{r setup, message = FALSE}
sales2019 <- read_csv("sales2019.csv")
dat <- read_csv("sales2019.csv")
library(stringr)
dim(dat)
colnames(dat)
sapply(dat, class)
sapply(dat, class)
sapply(dat, table(is.na))
l(dat, table(is.na))
lapply(dat, table(is.na))
mapply(dat, table(is.na))
sapply(dat, table(is.na))
table(is.na(dat))
sapply(dat, is.na(table))
sapply(dat, table(is.na))
sapply(dat, table(is.na(.)))
sapply(dat, table(is.na()))
sapply(dat, table(is.na(dat)))
sapply(dat, table(is.na))
colSums(is.na(dat))
dim(dat)
sapply(dat, class)
colSums(is.na(dat))
# Remove NA in user_submitted_review
dat1 <- dat %>%
filter(is.na(user_submitted_review))
# Remove NA in user_submitted_review
dat1 <- dat %>%
filter(is.na(dat$user_submitted_review))
?is.na
# Remove NA in user_submitted_review
dat1 <- dat %>%
filter(!is.na(dat$user_submitted_review))
# Remove NA in user_submitted_review
dat1 <- dat %>%
filter(!is.na(user_submitted_review))
View(dat)
# Remove NA in user_submitted_review
dat1 <- dat %>%
filter(
!is.na(user_submitted_review)
)
dat %>%
filter(!is.na(user_submitted_review))
# Remove NA in user_submitted_review
dat1 <- dat %>%
filter(!is.na(user_submitted_review))
library(dplyr)
# Remove NA in user_submitted_review
dat1 <- dat %>%
filter(!is.na(user_submitted_review))
colSums(is.na(dat))
# Calculate average number of books purchased
summarize(dat1, mean_purchase = mean(total_purchased))
# Calculate average number of books purchased
summarize(dat1, mean_purchase = mean(total_purchased, na.rm = TRUE))
# Fill missing values in total_purchased with average number of books purchased
dat2 <- dat1 %>%
mutate(is.na(total_purchased) == 3.985561)
View(dat2)
?ifelse
# Calculate average number of books purchased
mean_purchase <-summarize(dat1, mean(total_purchased,
na.rm = TRUE))
# Fill missing values in total_purchased with average number of books purchased
dat2 <- dat1 %>%
mutate(total_p =
ifelse(is.na(total_purchased)),
mean_purchase, total_purchased)
# Fill missing values in total_purchased with average number of books purchased
dat2 <- dat1 %>%
mutate(
total_p = ifelse(
is.na(total_purchased),
mean_purchase,
total_purchased))
View(dat2)
# Fill missing values in total_purchased with average number of books purchased
dat2 <- dat1 %>%
mutate(
total_p = ifelse(is.na(total_purchased),
round(mean_purchase,2),
total_purchased))
View(dat2)
View(dat2)
View(dat2)
unique(dat2$user_submitted_review)
# Examine unique cases in user_submitted_review
unique(dat2$user_submitted_review)
?case_when
?str_detect
case_when(
str_detect(x, "it was okay") == 4,
str_detect(x, "Awesome!") == 1,
str_detect(x, "Hated it") == 9,
str_detect(x, "Never read a better book") == 2,
str_detect(x, "OK") == 5,
str_detect(x, "The author's other books were better") == 6,
str_detect(x, "A lot of material was not needed") == 7,
str_detect(x, "Would not recommend") == 8,
str_detect(x, "I learned a lot") == 3,
)
positive_review = case_when(
str_detect(x, "it was okay") == 4,
str_detect(x, "Awesome!") == 1,
str_detect(x, "Hated it") == 9,
str_detect(x, "Never read a better book") == 2,
str_detect(x, "OK") == 5,
str_detect(x, "The author's other books were better") == 6,
str_detect(x, "A lot of material was not needed") == 7,
str_detect(x, "Would not recommend") == 8,
str_detect(x, "I learned a lot") == 3,
)
positive_review = case_when(
str_detect(x, "Awesome") ~ TRUE,
str_detect(x, "lot") ~ TRUE,
str_detect(x, "Never") ~ TRUE,
str_detect(x, "Ok") ~ TRUE,
TRUE ~ FALSE
)
classify_review <- function(x) {
positive_review = case_when(
str_detect(x, "Awesome") ~ TRUE,
str_detect(x, "lot") ~ TRUE,
str_detect(x, "Never") ~ TRUE,
str_detect(x, "Ok") ~ TRUE,
TRUE ~ FALSE
)
}
dat3 <- dat2 %>%
mutatet(classify_review(user_submitted_review))
dat3 <- dat2 %>%
mutate(classify_review(user_submitted_review))
View(dat3)
dat3 <- dat2 %>%
mutate(positive = classify_review(user_submitted_review))
library(lubridate)
mdy(dat3$date)
dat3$date <- mdy(dat3$date)
class(dat3$date)
View(dat3)
# Create grouping column to distinguish between sales before and after July 1 2019
dat4 <- dat3 %>%
mutate(
program = case_when(
date > "2019/07/01" ~ TRUE,
date < "2019/07/01" ~ FALSE)
)
View(dat4)
# Create summary table to compare number of books purchased before July 1, 2019 to after
dat4 %>% group_by(title) %>%
summarize(total = sumn(total_p))
# Create summary table to compare number of books purchased before July 1, 2019 to after
dat4 %>% group_by(title) %>%
summarize(total = sum(total_p))
# Create summary table to compare number of books purchased before July 1, 2019 to after
dat4 %>% group_by(program) %>%
summarize(total_books = sum(total_p))
# Create grouping column to distinguish between sales before and after July 1 2019
dat4 <- dat3 %>%
mutate(
program = case_when(
date > "2019/07/01" ~ "After",
date < "2019/07/01" ~ "Before")
)
# Create summary table to compare number of books purchased before July 1, 2019 to after
dat4 %>% group_by(program) %>%
summarize(total_books = sum(total_p))
dat4 %>% group_by(program)
# Create summary table to compare number of books purchased before July 1, 2019 to after
dat4 %>% group_by(program) %>%
summarize(total_books = sum(total_p))
class(dat3)
class(dat4)
sapply(dat4, class)
# Fill missing values in total_purchased with average number of books purchased
dat2 <- dat1 %>%
mutate(
total_p = unlist(ifelse(is.na(total_purchased),
round(mean_purchase,2),
total_purchased)))
View(dat2)
# Examine unique cases in user_submitted_review
unique(dat2$user_submitted_review)
# Function that takes in a sentence and returns a value indicating direction and degree of feedback
classify_review <- function(x) {
positive_review = case_when(
str_detect(x, "Awesome") ~ TRUE,
str_detect(x, "lot") ~ TRUE,
str_detect(x, "Never") ~ TRUE,
str_detect(x, "Ok") ~ TRUE,
TRUE ~ FALSE
)
}
dat3 <- dat2 %>%
mutate(positive = classify_review(user_submitted_review))
# Conversion of date column to temporal data
dat3$date <- mdy(dat3$date)
# Create grouping column to distinguish between sales before and after July 1 2019
dat4 <- dat3 %>%
mutate(
program = case_when(
date > "2019/07/01" ~ "After",
date < "2019/07/01" ~ "Before")
)
# Create summary table to compare number of books purchased before July 1, 2019 to after
dat4 %>% group_by(program) %>%
summarize(total_books = sum(total_p))
# Create summary table to compare number of books purchased before July 1, 2019 to after
dat4 %>% group_by(program) %>%
summarize(total_books = sum(total_p))
# Create summary table grouped by date and customer_type
dat4 %>% group_by(program, customer_type) %>%
summarize(total_books = sum(total_p))
# Create summary table grouped by date and customer_type
dat4 %>% group_by(program, customer_type) %>%
summarize(total_books = sum(total_p))
# Create summary table grouped by date and customer_type
dat4 %>% group_by(program, title) %>%
summarize(total_books = sum(total_p))
# Create summary table grouped by date and customer_type
dat4 %>% group_by(program, title) %>%
summarize(total_books = sum(total_p)) %>%
mutate(difference = total_books[dat4$program == "Before"]/total_books[dat4$program == "After"])
# Create summary table grouped by date and customer_type
dat4 %>% group_by(program, title) %>%
summarize(total_books = sum(total_p)) %>%
group_by(program) %>%
mutate(difference = total_books[dat4$program == "Before"]/total_books[dat4$program == "After"])
dat4 %>% group_by(program, title) %>%
summarize(total_books = sum(total_p))
?pivot_wide
?pivot_wider
?pivot_longer
library(dplyr)
library(tidyr)
?pivot_wider
# Create summary table grouped by date and customer_type
dat4 %>% group_by(program, title) %>%
summarize(total_books = sum(total_p)) %>%
pivot_wider(., names_from = program,
values_from = total_books)
# Create summary table grouped by date and customer_type
dat4 %>% group_by(program, title) %>%
summarize(total_books = sum(total_p)) %>%
pivot_wider(., names_from = program,
values_from = total_books) %>%
mutate(difference = Before/After)
# Create summary table grouped by date and customer_type
dat4 %>% group_by(program, title) %>%
summarize(total_books = sum(total_p)) %>%
pivot_wider(., names_from = program,
values_from = total_books) %>%
mutate(difference = Before-After)
# Create summary table grouped by date and customer_type
dat4 %>% group_by(program, title) %>%
summarize(total_books = sum(total_p)) %>%
pivot_wider(., names_from = program,
values_from = total_books) %>%
mutate(difference = After-Before)
# Create summary table grouped by date and customer_type
dat4 %>% group_by(program, title) %>%
summarize(total_books = sum(total_p)) %>%
pivot_wider(., names_from = program,
values_from = total_books) %>%
mutate(difference = After - Before)
# Create summary table grouped by date and customer_type
dat4 %>% group_by(program, title) %>%
summarize(total_books = sum(total_p)) %>%
pivot_wider(., names_from = program,
values_from = total_books) %>%
mutate(difference = After - Before)
# Create summary table grouped by date and customer_type
dat4 %>% group_by(program, title) %>%
summarize(total_books = sum(total_p)) %>%
pivot_wider(., names_from = program,
values_from = total_books) %>%
mutate(difference = After - Before) %>%
sort(desc(difference))
# Create summary table grouped by date and customer_type
dat4 %>% group_by(program, title) %>%
summarize(total_books = sum(total_p)) %>%
pivot_wider(., names_from = program,
values_from = total_books) %>%
mutate(difference = After - Before) %>%
sort(desc(difference))
?sort
# Create summary table grouped by date and customer_type
dat4 %>% group_by(program, title) %>%
summarize(total_books = sum(total_p)) %>%
pivot_wider(., names_from = program,
values_from = total_books) %>%
mutate(difference = After - Before) %>%
arrange(desc(difference))
# Create summary table grouped by date and customer_type
dat4 %>% group_by(program, title) %>%
summarize(total_books = sum(total_p)) %>%
pivot_wider(., names_from = program,
values_from = total_books) %>%
mutate(difference = After - Before) %>%
arrange(desc(abs(difference)))
# Create summary table to compare number of positive reviews before and after July 1, 2019
dat4 %>% group_by(date) %>%
summarize(n = n(positive))
# Create summary table to compare number of positive reviews before and after July 1, 2019
dat4 %>% group_by(date) %>%
summarize(n = sum(positive))
# Create summary table to compare number of positive reviews before and after July 1, 2019
dat4 %>% group_by(program) %>%
summarize(n = sum(positive))
# Create summary table to compare number of positive reviews before and after July 1, 2019
dat4 %>% group_by(program) %>%
summarize(n = sum(positive))
915 - 852
?substr
range(dat4$date)
substr(dat4$date, 6, 7)
dat5 <- dat4 %>%
mutate(
month = case_when(
substr(dat4$date, 6, 7) == 01 ~ "January",
substr(dat4$date, 6, 7) == 02 ~ "February",
substr(dat4$date, 6, 7) == 03 ~ "March",
substr(dat4$date, 6, 7) == 04 ~ "April",
substr(dat4$date, 6, 7) == 05 ~ "May",
substr(dat4$date, 6, 7) == 06 ~ "June",
substr(dat4$date, 6, 7) == 07 ~ "July",
substr(dat4$date, 6, 7) == 08 ~ "August",
substr(dat4$date, 6, 7) == 09 ~ "September",
substr(dat4$date, 6, 7) == 10 ~ "October",
substr(dat4$date, 6, 7) == 11 ~ "November",
substr(dat4$date, 6, 7) == 12 ~ "December",
)
)
View(dat5)
class(substr(dat4$date, 6, 7))
dat5 <- dat4 %>%
mutate(
month = case_when(
substr(dat4$date, 6, 7) == "01" ~ "January",
substr(dat4$date, 6, 7) == "02" ~ "February",
substr(dat4$date, 6, 7) == "03" ~ "March",
substr(dat4$date, 6, 7) == "04" ~ "April",
substr(dat4$date, 6, 7) == "05" ~ "May",
substr(dat4$date, 6, 7) == "06" ~ "June",
substr(dat4$date, 6, 7) == "07" ~ "July",
substr(dat4$date, 6, 7) == "08" ~ "August",
substr(dat4$date, 6, 7) == "09" ~ "September",
substr(dat4$date, 6, 7) == "10" ~ "October",
substr(dat4$date, 6, 7) == "11" ~ "November",
substr(dat4$date, 6, 7) == "12" ~ "December",
)
)
View(dat5)
# Create summary table to compare book sales per month
dat5 %>% group_by(program, month) %>%
summarize(sum(total_p))
# Create summary table to compare book sales per month
dat5 %>% group_by(program, month) %>%
summarize(sum = sum(total_p)) %>%
pivot_wider(names_from = program,
values_from = sum)
dat5 %>% group_by(month) %>%
summarize(sum = sum(total_p))
# Create summary table to compare book sales per month
dat5 %>% group_by(month) %>%
summarize(sum = sum(total_p)) %>%
arrange(desc(sum))
# Scatterplot
dat5 %>% ggplot(aes(x = total_p, y = date)) +
geom_point()
library(ggplot2)
# Scatterplot
dat5 %>% ggplot(aes(x = total_p, y = date)) +
geom_point()
# Scatterplot
dat5 %>% ggplot(aes(x = total_p, y = date)) +
geom_point()
# Scatterplot
dat5 %>% ggplot(aes(y = total_p, x = date)) +
geom_point()
# Scatterplot
dat5 %>% ggplot(aes(y = total_p, x = date)) +
geom_point() + theme_minimal()
# Scatterplot
dat5 %>% ggplot(aes(y = total_p, x = date)) +
theme_minimal() +
stat_summary_2d(aes(col = total_p), fun = 'mean',
geom = 'point', size = 5)
# Scatterplot
dat5 %>% ggplot(aes(y = total_p, x = date, z = total_p)) +
theme_minimal() +
stat_summary_2d(aes(col = total_p), fun = 'mean',
geom = 'point', size = 5)
# Scatterplot
dat5 %>% ggplot(aes(x = date, z = total_p)) +
theme_minimal() +
stat_summary_2d(aes(col = total_p), fun = 'mean',
geom = 'point', size = 5)
# Scatterplot
dat5 %>% ggplot(aes(x = date, y= cumsum(total_p))) +
theme_minimal() +
geom_line()
# Scatterplot
dat5 %>% ggplot(aes(x = date, y= cumsum(total_p))) +
theme_minimal() +
geom_point()
# Create summary table to compare book sales per month
dat5 %>% group_by(month) %>%
summarize(sum = sum(total_p)) %>%
arrange(desc(sum))
# Scatterplot
dat5 %>% ggplot(aes(x = date, y= cumsum(total_p))) +
theme_minimal() +
geom_bar()
# Scatterplot
dat5 %>% ggplot(aes(x = date))) +
# Scatterplot
ggplot(aes(x = date), data = dat5) +
theme_minimal() +
geom_bar()
# Scatterplot
ggplot(aes(x = date), data = dat5) +
theme_minimal() +
geom_bar() +
scale_fill_brewer(palette="Reds")
# Scatterplot
ggplot(aes(x = date), data = dat5) +
theme_minimal() +
geom_bar()
# Scatterplot
ggplot(aes(x = date), data = dat5) +
theme_minimal() +
geom_bar()
# Scatterplot
ggplot(aes(x = date), data = dat5) +
theme_minimal() +
geom_bar() +
xlab("Date") +
ylab("Amount of book orders") +
ggtitle("Bar chart")
dat4[dat4$date == "2019-02-24"]
dat4[,dat4$date == "2019-02-24"]
dat4[dat4$date == "2019-02-24",]
# Scatterplot
ggplot(aes(x = month), data = dat5) +
theme_minimal() +
geom_bar() +
xlab("Date") +
ylab("Amount of book orders") +
ggtitle("Bar chart")
factor(dat4$month, levels = month.name)
# Scatterplot
dat5$month <- factor(dat5$month, levels = month.name)
ggplot(aes(x = month), data = dat5) +
theme_minimal() +
geom_bar() +
xlab("Date") +
ylab("Amount of book orders") +
ggtitle("Bar chart")
